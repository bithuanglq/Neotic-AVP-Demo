<?xml version="1.0"?>

<robot name="mrobot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Defining the colors used in this robot -->
    <material name="Black">
        <color rgba="0 0 0 1"/>
    </material>

    <material name="White">
        <color rgba="1 1 1 1"/>
    </material>

    <material name="Blue">
        <color rgba="0 0 1 1"/>
    </material>

    <material name="Red">
        <color rgba="1 0 0 1"/>
    </material>

    <!-- PROPERTY LIST -->
    <!--All units in m-kg-s-radians unit system -->
    <xacro:property name="M_PI" value="3.1415926535897931" />

    <!-- Main body length, width, height and mass -->
    <xacro:property name="base_mass"        value="0.5" /> 
    <xacro:property name="base_link_radius" value="0.3" />
    <xacro:property name="base_link_length" value="0.005" />

    <xacro:property name="motor_x" value="-0.05"/>

    <!-- Caster radius and mass -->
    <xacro:property name="caster_radius"          value="0.03" /> 
    <xacro:property name="caster_mass"            value="0.01" /> 
    <xacro:property name="caster_joint_origin_x"  value="-0.2" />

    <!-- Wheel radius, height and mass -->
    <xacro:property name="wheel_radius" value="0.06" /> 
    <xacro:property name="wheel_height" value="0.03" />
    <xacro:property name="wheel_mass"   value="0.1" />


    <!-- Macro for inertia matrix -->
    <xacro:macro name="sphere_inertial_matrix" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0"
                iyy="${2*m*r*r/5}" iyz="0" 
                izz="${2*m*r*r/5}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial_matrix" params="m r h">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
                iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
                izz="${m*r*r/2}" /> 
        </inertial>
    </xacro:macro>

    <xacro:macro name="box_inertial_matrix" params="m w h d">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(h*h+d*d)/12}" ixy = "0" ixz = "0"
                iyy="${m*(w*w+d*d)/12}" iyz = "0"
                izz="${m*(w*w+h*h)/12}" /> 
        </inertial>
    </xacro:macro>

    <!-- Macro for wheel joint -->
    <xacro:macro name="wheel" params="lr translateY">
        <!-- lr: left, right -->
        <link name="wheel_${lr}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0  0 " /> 
                <geometry>
                    <cylinder length="${wheel_height}" radius="${wheel_radius}" />
                </geometry>
                <material name="White" />
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0 " />
                <geometry>
                    <cylinder length="${wheel_height}" radius="${wheel_radius}" />
                </geometry>
            </collision>
            <xacro:cylinder_inertial_matrix  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_height}" />
        </link>

        <gazebo reference="wheel_${lr}_link">
            <material>Gazebo/White</material>
        </gazebo>

        <joint name="base_to_wheel_${lr}_joint" type="continuous">
            <parent link="base_link"/>
            <child link="wheel_${lr}_link"/>
            <origin xyz="${motor_x} ${translateY * base_link_radius} 0" rpy="0 0 0" /> 
            <axis xyz="0 1 0" rpy="0  0" />
        </joint>

        <!-- Transmission is important to link the joints and the controller -->
        <transmission name="wheel_${lr}_joint_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="base_to_wheel_${lr}_joint" />
            <actuator name="wheel_${lr}_joint_motor">
                <hardwareInterface>VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>

    <!-- Macro for caster joint -->
    <xacro:macro name="caster" params="fb translateX">
        <!-- fb: front, back -->
        <link name="${fb}_caster_link">
            <visual>
                <origin xyz="0 0 0 " rpy="0 0 0" /> 
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
                <material name="White" />
            </visual>  
            <collision>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
                <origin xyz="0 0 0 " rpy="0 0 0" /> 
            </collision>      
            <xasphere_inertial_matrix  m="${caster_mass}" r="${caster_radius}" />
        </link>

        <gazebo reference="${fb}_caster_link">
            <material>Gazebo/White</material>
        </gazebo>

        <joint name="base_to_${fb}_caster_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${fb}_caster_link"/>
            <origin xyz="${translateX*caster_joint_origin_x} 0 ${-caster_radius}" rpy="0 0 0"/>
        </joint>
    </xacro:macro>



	<!-- BASE-LINK -->
	<!--Actual body/chassis of the robot-->
	<link name="base_link">
		<xacro:cylinder_inertial_matrix  m="${base_mass}" r="${base_link_radius}" h="${base_link_length}" />
		<visual>
			<origin xyz=" 0 0 0" rpy="0 0 0" />
			<geometry>
				<cylinder length="${base_link_length}"  radius="${base_link_radius}"/>
			</geometry>
			<material name="Red" />
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="0 0 0" />
			<geometry>
				<cylinder length="${base_link_length}"  radius="${base_link_radius}"/>
			</geometry>
		</collision>   
	</link>
	<gazebo reference="base_link">
		<material>Gazebo/Red</material>
	</gazebo>

    <!-- BASE-FOOTPRINT -->
    <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
	<link name="base_footprint">
		<visual>
			<origin xyz="0 0 0" rpy="0 0 0" />
			<geometry>
				<box size="0.001 0.001 0.001" />
			</geometry>
		</visual>
	</link>
	<joint name="base_footprint_joint" type="fixed">
		<origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />
		<parent link="base_footprint"/>
		<child link="base_link" />
	</joint>



	<!-- Wheel Calling -->
	<xacro:wheel lr="right"  translateY="1" />
	<xacro:wheel lr="left"  translateY="-1" />

	<!-- Casters Calling -->
	<xacro:caster fb="front"  translateX="-1" />


	<link name="xMark_link">
		<visual>
			<origin xyz=" 0 0 0 " rpy="0 0 0" />
			<geometry>
				<box size="0.2 0.01 0.05" />
			</geometry>
			<material name="White" />
		</visual>
	</link>
	<gazebo reference="xMark_link">
		<material>Gazebo/White</material>
	</gazebo>

	<joint name="xMark" type="fixed">
		<origin xyz="0.1 0 0.0" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="xMark_link"/>
	</joint>


	<link name="yMark_link">
		<visual>
			<origin xyz=" 0 0 0 " rpy="0 0 0" />
			<geometry>
				<box size="0.01 0.15 0.05" />
			</geometry>
			<material name="Blue" />
		</visual>
	</link>
		<gazebo reference="yMark_link">
		<material>Gazebo/Blue</material>
	</gazebo>

	<joint name="yMark" type="fixed">
		<origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="yMark_link"/>
	</joint>

	<!-- controller -->
	<gazebo>
		<!-- located in /opt/ros/noetic/lib/ -->
		<plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
			<rosDebugLevel>Debug</rosDebugLevel>
			<publishWheelTF>true</publishWheelTF>
			<robotNamespace>/</robotNamespace>
			<publishTf>1</publishTf>
			<publishWheelJointState>true</publishWheelJointState>
			<alwaysOn>true</alwaysOn>
			<updateRate>100.0</updateRate>
			<legacyMode>true</legacyMode>
			<leftJoint>base_to_wheel_left_joint</leftJoint>
			<rightJoint>base_to_wheel_right_joint</rightJoint>
			<wheelSeparation>${base_link_radius*2}</wheelSeparation>
			<wheelDiameter>${2*wheel_radius}</wheelDiameter>
			<broadcastTF>1</broadcastTF>
			<wheelTorque>30</wheelTorque>
			<wheelAcceleration>1.8</wheelAcceleration>
			<commandTopic>cmd_vel</commandTopic>
			<odometryFrame>odom</odometryFrame> 
			<odometryTopic>odom</odometryTopic> 
			<robotBaseFrame>base_footprint</robotBaseFrame>
		</plugin>
	</gazebo> 






	<!-- cameras -->
	<link name="camera0_link">
		<visual>
		<origin xyz=" 0 0 0 " rpy="0 0 0" />
		<geometry>
		<sphere radius="0.01" />
		</geometry>
		<material name="Blue">
		<color rgba="0 0 0 0.95"/>
		</material>
		</visual>
	</link>
	<joint name="realsense_frame_joint" type="fixed">
		<origin xyz="0 0 0.5" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="camera0_link"/>
	</joint>
	<link name="camera1_link">
	<visual>
		<origin xyz=" 0 0 0 " rpy="0 0 0" />
		<geometry>
		<sphere radius="0.01" />
		</geometry>
		<material name="Blue">
		<color rgba="0 0 0 0.95"/>
		</material>	
	</visual>
	</link>

		<joint name="camera1_joint" type="fixed">
			<origin xyz="0.00 0 0.5" rpy="0 0 1.0471975511965976"/>
			<parent link="base_link"/>
			<child link="camera1_link"/>
		</joint> 


	<link name="camera2_link">
		<visual>
		<origin xyz=" 0 0 0 " rpy="0 0 0" />
		<geometry>
		<sphere radius="0.01" />
		</geometry>
		<material name="Blue">
		<color rgba="0 0 0 0.95"/>
		</material>
		</visual>
	</link>

		<joint name="camera2_joint" type="fixed">
		<origin xyz="0.00 0 0.5" rpy="0 0 2.0943951023931953"/>
		<parent link="base_link"/>
		<child link="camera2_link"/>
		</joint>

	<link name="camera3_link">
		<visual>
			<origin xyz=" 0 0 0 " rpy="0 0 0" />
			<geometry>
			<sphere radius="0.01" />
			</geometry>
			<material name="Blue">
			<color rgba="0 0 0 0.95"/>
			</material>
		</visual>
	</link>
	
		<joint name="camera3_joint" type="fixed">
			<origin xyz="0.00 0 0.5" rpy="0 0 3.141592653589793"/>
			<parent link="base_link"/>
			<child link="camera3_link"/>
		</joint> 

	<link name="camera4_link">
			<visual>
			<origin xyz=" 0 0 0 " rpy="0 0 0" />
			<geometry>
			<sphere radius="0.01" />
			</geometry>
			<material name="Blue">
			<color rgba="0 0 0 0.95"/>
			</material>
			</visual>
	</link>
	
		<joint name="camera4_joint" type="fixed">
			<origin xyz="0.00 0 0.5" rpy="0 0 -2.0943951023931953"/>
			<parent link="base_link"/>
			<child link="camera4_link"/>
		</joint> 


	<link name="camera5_link">
		<visual>
		<origin xyz=" 0 0 0 " rpy="0 0 0" />
		<geometry>
		<sphere radius="0.01" />
		</geometry>
		<material name="Blue">
		<color rgba="0 0 0 0.95"/>
		</material>
		</visual>
	</link>
		
		<joint name="camera5_joint" type="fixed">
		<origin xyz="0.00 0 0.5" rpy="0 0 -1.0471975511965976 "/>
		<parent link="base_link"/>
		<child link="camera5_link"/>
		</joint> 


	<gazebo reference="camera0_link">
		<turnGravityOff>false</turnGravityOff>
		<sensor type="depth" name="realsense_depth">
		<update_rate>30.0</update_rate>
		<camera>
		<!-- 75x65 degree FOV for the depth sensor -->
		<horizontal_fov>1.5184351666666667</horizontal_fov>
		<vertical_fov>1.0122901111111111</vertical_fov>
	
		<image>
		<width>640</width>
		<height>480</height>
		<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
		<format>RGB8</format>
		</image>
		<clip>
		<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
		<near>0.01</near>
		<far>50.0</far>
		</clip>
		</camera>
		<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
		<baseline>0.2</baseline>
		<alwaysOn>true</alwaysOn>
		<updateRate>30</updateRate>
		<cameraName>camera0</cameraName>
		<imageTopicName>color/image_raw</imageTopicName>
		<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
		<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
		<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
		<pointCloudTopicName>depth/color/points</pointCloudTopicName>
		<frameName>camera0_link</frameName>
		<pointCloudCutoff>0.1</pointCloudCutoff>
		<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
		<distortionK1>0.00000001</distortionK1>
		<distortionK2>0.00000001</distortionK2>
		<distortionK3>0.00000001</distortionK3>
		<distortionT1>0.00000001</distortionT1>
		<distortionT2>0.00000001</distortionT2>
		<CxPrime>0</CxPrime>
		<Cx>0</Cx>
		<Cy>0</Cy>
		<focalLength>0</focalLength>
		<hackBaseline>0</hackBaseline>
		</plugin>
		</sensor>
	</gazebo>
	<gazebo reference="camera1_link">
			<turnGravityOff>false</turnGravityOff>
			<sensor type="depth" name="realsense_depth">
			<update_rate>30.0</update_rate>
			<camera>
			<!-- 75x65 degree FOV for the depth sensor -->
			<horizontal_fov>1.5184351666666667</horizontal_fov>
			<vertical_fov>1.0122901111111111</vertical_fov>
		
			<image>
			<width>640</width>
			<height>480</height>
			<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
			<format>RGB8</format>
			</image>
			<clip>
			<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
			<near>0.01</near>
			<far>50.0</far>
			</clip>
			</camera>
			<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
			<baseline>0.2</baseline>
			<alwaysOn>true</alwaysOn>
			<updateRate>30</updateRate>
			<cameraName>camera1</cameraName>
			<imageTopicName>color/image_raw</imageTopicName>
			<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
			<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
			<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
			<pointCloudTopicName>depth/color/points</pointCloudTopicName>
			<frameName>camera1_link</frameName>
			<pointCloudCutoff>0.1</pointCloudCutoff>
			<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
			<distortionK1>0.00000001</distortionK1>
			<distortionK2>0.00000001</distortionK2>
			<distortionK3>0.00000001</distortionK3>
			<distortionT1>0.00000001</distortionT1>
			<distortionT2>0.00000001</distortionT2>
			<CxPrime>0</CxPrime>
			<Cx>0</Cx>
			<Cy>0</Cy>
			<focalLength>0</focalLength>
			<hackBaseline>0</hackBaseline>
			</plugin>
			</sensor>
	</gazebo>
	<gazebo reference="camera2_link">
				<turnGravityOff>false</turnGravityOff>
				<sensor type="depth" name="realsense_depth">
				<update_rate>30.0</update_rate>
				<camera>
				<!-- 75x65 degree FOV for the depth sensor -->
				<horizontal_fov>1.5184351666666667</horizontal_fov>
				<vertical_fov>1.0122901111111111</vertical_fov>
			
				<image>
				<width>640</width>
				<height>480</height>
				<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
				<format>RGB8</format>
				</image>
				<clip>
				<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
				<near>0.01</near>
				<far>50.0</far>
				</clip>
				</camera>
				<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
				<baseline>0.2</baseline>
				<alwaysOn>true</alwaysOn>
				<updateRate>30</updateRate>
				<cameraName>camera2</cameraName>
				<imageTopicName>color/image_raw</imageTopicName>
				<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
				<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
				<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
				<pointCloudTopicName>depth/color/points</pointCloudTopicName>
				<frameName>camera2_link</frameName>
				<pointCloudCutoff>0.1</pointCloudCutoff>
				<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
				<distortionK1>0.00000001</distortionK1>
				<distortionK2>0.00000001</distortionK2>
				<distortionK3>0.00000001</distortionK3>
				<distortionT1>0.00000001</distortionT1>
				<distortionT2>0.00000001</distortionT2>
				<CxPrime>0</CxPrime>
				<Cx>0</Cx>
				<Cy>0</Cy>
				<focalLength>0</focalLength>
				<hackBaseline>0</hackBaseline>
				</plugin>
				</sensor>
	</gazebo>
	<gazebo reference="camera3_link">
					<turnGravityOff>false</turnGravityOff>
					<sensor type="depth" name="realsense_depth">
					<update_rate>30.0</update_rate>
					<camera>
					<!-- 75x65 degree FOV for the depth sensor -->
					<horizontal_fov>1.5184351666666667</horizontal_fov>
					<vertical_fov>1.0122901111111111</vertical_fov>
				
					<image>
					<width>640</width>
					<height>480</height>
					<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
					<format>RGB8</format>
					</image>
					<clip>
					<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
					<near>0.01</near>
					<far>50.0</far>
					</clip>
					</camera>
					<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
					<baseline>0.2</baseline>
					<alwaysOn>true</alwaysOn>
					<updateRate>30</updateRate>
					<cameraName>camera3</cameraName>
					<imageTopicName>color/image_raw</imageTopicName>
					<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
					<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
					<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
					<pointCloudTopicName>depth/color/points</pointCloudTopicName>
					<frameName>camera3_link</frameName>
					<pointCloudCutoff>0.1</pointCloudCutoff>
					<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
					<distortionK1>0.00000001</distortionK1>
					<distortionK2>0.00000001</distortionK2>
					<distortionK3>0.00000001</distortionK3>
					<distortionT1>0.00000001</distortionT1>
					<distortionT2>0.00000001</distortionT2>
					<CxPrime>0</CxPrime>
					<Cx>0</Cx>
					<Cy>0</Cy>
					<focalLength>0</focalLength>
					<hackBaseline>0</hackBaseline>
					</plugin>
					</sensor>
	</gazebo>
	<gazebo reference="camera4_link">
						<turnGravityOff>false</turnGravityOff>
						<sensor type="depth" name="realsense_depth">
						<update_rate>30.0</update_rate>
						<camera>
						<!-- 75x65 degree FOV for the depth sensor -->
						<horizontal_fov>1.5184351666666667</horizontal_fov>
						<vertical_fov>1.0122901111111111</vertical_fov>
					
						<image>
						<width>640</width>
						<height>480</height>
						<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
						<format>RGB8</format>
						</image>
						<clip>
						<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
						<near>0.01</near>
						<far>50.0</far>
						</clip>
						</camera>
						<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
						<baseline>0.2</baseline>
						<alwaysOn>true</alwaysOn>
						<updateRate>30</updateRate>
						<cameraName>camera4</cameraName>
						<imageTopicName>color/image_raw</imageTopicName>
						<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
						<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
						<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
						<pointCloudTopicName>depth/color/points</pointCloudTopicName>
						<frameName>camera4_link</frameName>
						<pointCloudCutoff>0.1</pointCloudCutoff>
						<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
						<distortionK1>0.00000001</distortionK1>
						<distortionK2>0.00000001</distortionK2>
						<distortionK3>0.00000001</distortionK3>
						<distortionT1>0.00000001</distortionT1>
						<distortionT2>0.00000001</distortionT2>
						<CxPrime>0</CxPrime>
						<Cx>0</Cx>
						<Cy>0</Cy>
						<focalLength>0</focalLength>
						<hackBaseline>0</hackBaseline>
						</plugin>
						</sensor>
	</gazebo>
	<gazebo reference="camera5_link">
							<turnGravityOff>false</turnGravityOff>
							<sensor type="depth" name="realsense_depth">
							<update_rate>30.0</update_rate>
							<camera>
							<!-- 75x65 degree FOV for the depth sensor -->
							<horizontal_fov>1.5184351666666667</horizontal_fov>
							<vertical_fov>1.0122901111111111</vertical_fov>
						
							<image>
							<width>640</width>
							<height>480</height>
							<!-- TODO: check what format the Realsense hardware delivers and set this to match! -->
							<format>RGB8</format>
							</image>
							<clip>
							<!-- give the color sensor a maximum range of 50m so that the simulation renders nicely -->
							<near>0.01</near>
							<far>50.0</far>
							</clip>
							</camera>
							<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
							<baseline>0.2</baseline>
							<alwaysOn>true</alwaysOn>
							<updateRate>30</updateRate>
							<cameraName>camera5</cameraName>
							<imageTopicName>color/image_raw</imageTopicName>
							<cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
							<depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
							<depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
							<pointCloudTopicName>depth/color/points</pointCloudTopicName>
							<frameName>camera5_link</frameName>
							<pointCloudCutoff>0.1</pointCloudCutoff>
							<pointCloudCutoffMax>10.0</pointCloudCutoffMax>
							<distortionK1>0.00000001</distortionK1>
							<distortionK2>0.00000001</distortionK2>
							<distortionK3>0.00000001</distortionK3>
							<distortionT1>0.00000001</distortionT1>
							<distortionT2>0.00000001</distortionT2>
							<CxPrime>0</CxPrime>
							<Cx>0</Cx>
							<Cy>0</Cy>
							<focalLength>0</focalLength>
							<hackBaseline>0</hackBaseline>
							</plugin>
							</sensor>
	</gazebo>




</robot>